//sieve

ll primes[1000000], n = 1000000, k = 0;
bool flag[1000000];
void sieve(){
    ll i, p, x, sum;
    memset(flag, true, sizeof(flag));
    
    for(p = 2; p <= n; p++){
        if(flag[p]){
            for(i = p * 2; i <= n; i += p){
                flag[i] = false;
            }
        }
    }
    for(i = 2; i <= n; i++){
        if(flag[i]) primes[k++] = i;
    }
}









//prime factorization
int primes[100] = {2, 3, 5, 7, 11, 13, 17, 19};
vector<pair<int, int>> factorizeNFactorial(int n) {
    const int M = 1e8 + 7;
    vector<pair<int, int>> ret;
    for (int i = 0; i < sz(primes) and primes[i] <= n; i++) {
        ll ex = 0;
        ll p = primes[i];
        ll tmp = n / p;
        while (tmp) {
            ex += tmp;
            p *= primes[i];
            tmp = n / p;
        }
        if (ex) ret.emplace_back(primes[i], ex);
    }
    ull res = 1;
    for (const auto &i:ret) {
        res *= (i.second + 1);
        res %= M;
    }
    cout << res << endl;
    return ret;
}
